C fence2-iriw_R_seq_cst_relaxed_acquire_relaxed_W_release_relaxed

{
[x] = 0;
[y] = 0;
}

// IRIW with C/C++ atomics


P0 (atomic_int* x) {
  atomic_store_explicit(x, 1, memory_order_release);
}

P1 (atomic_int* y) {
  atomic_store_explicit(y, 1, memory_order_relaxed);
}

P2 (atomic_int* x, atomic_int* y) {
  int r1 = atomic_load_explicit(x, memory_order_seq_cst);
  atomic_thread_fence(memory_order_seq_cst);
  int r2 = atomic_load_explicit(y, memory_order_relaxed);
}

P3 (atomic_int* x, atomic_int* y) {
  int r3 = atomic_load_explicit(y, memory_order_acquire);
  int r4 = atomic_load_explicit(x, memory_order_relaxed);
}

exists
(2:r1 = 1 /\ 2:r2 = 0 /\ 3:r3 = 1 /\ 3:r4 = 0)
